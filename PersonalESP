-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- Load Fluent UI with error handling
local Fluent, SaveManager, InterfaceManager
local success, err = pcall(function()
    Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
    SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
    InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()
end)

if not success then
    warn("Failed to load Fluent UI: "..tostring(err))
    return
end

-- Data structures
local Drawings = {
    ESP = {},
    Skeleton = {}
}

local Highlights = {}

local Colors = {
    Enemy = Color3.fromRGB(255, 25, 25),
    Ally = Color3.fromRGB(25, 255, 25),
    Neutral = Color3.fromRGB(255, 255, 255),
    Selected = Color3.fromRGB(255, 210, 0),
    Health = Color3.fromRGB(0, 255, 0),
    Distance = Color3.fromRGB(200, 200, 200),
    Rainbow = nil
}

local Settings = {
    Enabled = false,
    TeamCheck = false,
    ShowTeam = false,
    VisibilityCheck = true,
    BoxESP = false,
    BoxStyle = "Corner",
    BoxOutline = true,
    BoxFilled = false,
    BoxFillTransparency = 0.5,
    BoxThickness = 1,
    TracerESP = false,
    TracerOrigin = "Bottom",
    TracerStyle = "Line",
    TracerThickness = 1,
    HealthESP = false,
    HealthStyle = "Bar",
    HealthBarSide = "Left",
    HealthTextSuffix = "HP",
    NameESP = false,
    NameMode = "DisplayName",
    ShowDistance = true,
    DistanceUnit = "studs",
    TextSize = 14,
    TextFont = 2,
    RainbowSpeed = 1,
    MaxDistance = 1000,
    RefreshRate = 1/144,
    Snaplines = false,
    SnaplineStyle = "Straight",
    RainbowEnabled = false,
    RainbowBoxes = false,
    RainbowTracers = false,
    RainbowText = false,
    ChamsEnabled = false,
    ChamsOutlineColor = Color3.fromRGB(255, 255, 255),
    ChamsFillColor = Color3.fromRGB(255, 0, 0),
    ChamsOccludedColor = Color3.fromRGB(150, 0, 0),
    ChamsTransparency = 0.5,
    ChamsOutlineTransparency = 0,
    ChamsOutlineThickness = 0.1,
    SkeletonESP = false,
    SkeletonColor = Color3.fromRGB(255, 255, 255),
    SkeletonThickness = 1.5,
    SkeletonTransparency = 1
}

-- Helper functions
local function CreateDrawing(type, properties)
    local drawing = Drawing.new(type)
    for prop, value in pairs(properties) do
        drawing[prop] = value
    end
    return drawing
end

local function CreateESP(player)
    if player == LocalPlayer then return end
    
    local box = {
        TopLeft = CreateDrawing("Line", {Visible = false, Color = Colors.Enemy, Thickness = Settings.BoxThickness}),
        TopRight = CreateDrawing("Line", {Visible = false, Color = Colors.Enemy, Thickness = Settings.BoxThickness}),
        BottomLeft = CreateDrawing("Line", {Visible = false, Color = Colors.Enemy, Thickness = Settings.BoxThickness}),
        BottomRight = CreateDrawing("Line", {Visible = false, Color = Colors.Enemy, Thickness = Settings.BoxThickness}),
        Left = CreateDrawing("Line", {Visible = false, Color = Colors.Enemy, Thickness = Settings.BoxThickness}),
        Right = CreateDrawing("Line", {Visible = false, Color = Colors.Enemy, Thickness = Settings.BoxThickness}),
        Top = CreateDrawing("Line", {Visible = false, Color = Colors.Enemy, Thickness = Settings.BoxThickness}),
        Bottom = CreateDrawing("Line", {Visible = false, Color = Colors.Enemy, Thickness = Settings.BoxThickness})
    }
    
    local tracer = CreateDrawing("Line", {
        Visible = false,
        Color = Colors.Enemy,
        Thickness = Settings.TracerThickness
    })
    
    local healthBar = {
        Outline = CreateDrawing("Square", {Visible = false}),
        Fill = CreateDrawing("Square", {Visible = false, Filled = true, Color = Colors.Health}),
        Text = CreateDrawing("Text", {Visible = false, Center = true, Size = Settings.TextSize, Color = Colors.Health, Font = Settings.TextFont})
    }
    
    local info = {
        Name = CreateDrawing("Text", {Visible = false, Center = true, Size = Settings.TextSize, Color = Colors.Enemy, Font = Settings.TextFont, Outline = true}),
        Distance = CreateDrawing("Text", {Visible = false, Center = true, Size = Settings.TextSize, Color = Colors.Enemy, Font = Settings.TextFont, Outline = true})
    }
    
    local snapline = CreateDrawing("Line", {
        Visible = false,
        Color = Colors.Enemy,
        Thickness = 1
    })
    
    local highlight = Instance.new("Highlight")
    highlight.FillColor = Settings.ChamsFillColor
    highlight.OutlineColor = Settings.ChamsOutlineColor
    highlight.FillTransparency = Settings.ChamsTransparency
    highlight.OutlineTransparency = Settings.ChamsOutlineTransparency
    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    highlight.Enabled = Settings.ChamsEnabled
    
    Highlights[player] = highlight
    
    local skeletonParts = {
        "Head", "Neck", "UpperSpine", "LowerSpine",
        "LeftShoulder", "LeftUpperArm", "LeftLowerArm", "LeftHand",
        "RightShoulder", "RightUpperArm", "RightLowerArm", "RightHand",
        "LeftHip", "LeftUpperLeg", "LeftLowerLeg", "LeftFoot",
        "RightHip", "RightUpperLeg", "RightLowerLeg", "RightFoot"
    }
    
    local skeleton = {}
    for _, partName in ipairs(skeletonParts) do
        skeleton[partName] = CreateDrawing("Line", {
            Visible = false,
            Color = Settings.SkeletonColor,
            Thickness = Settings.SkeletonThickness,
            Transparency = Settings.SkeletonTransparency
        })
    end
    
    Drawings.Skeleton[player] = skeleton
    Drawings.ESP[player] = {
        Box = box,
        Tracer = tracer,
        HealthBar = healthBar,
        Info = info,
        Snapline = snapline
    }
end

local function RemoveESP(player)
    local function safeRemove(obj)
        if obj and typeof(obj) == "Instance" and obj:IsA("Line") then
            obj:Remove()
        end
    end
    
    local esp = Drawings.ESP[player]
    if esp then
        for _, obj in pairs(esp.Box) do safeRemove(obj) end
        safeRemove(esp.Tracer)
        for _, obj in pairs(esp.HealthBar) do safeRemove(obj) end
        for _, obj in pairs(esp.Info) do safeRemove(obj) end
        safeRemove(esp.Snapline)
        Drawings.ESP[player] = nil
    end
    
    local highlight = Highlights[player]
    if highlight then
        highlight:Destroy()
        Highlights[player] = nil
    end
    
    local skeleton = Drawings.Skeleton[player]
    if skeleton then
        for _, line in pairs(skeleton) do
            safeRemove(line)
        end
        Drawings.Skeleton[player] = nil
    end
end

-- Rest of your functions (GetPlayerColor, GetBoxCorners, GetTracerOrigin, UpdateESP, etc.)
-- ... [Keep all your existing functions but add error handling where needed]

-- Create the UI Window with error handling
local Window, Tabs
local success, err = pcall(function()
    Window = Fluent:CreateWindow({
        Title = "WA Universal ESP",
        SubTitle = "by WA",
        TabWidth = 160,
        Size = UDim2.fromOffset(580, 460),
        Acrylic = false,
        Theme = "Dark",
        MinimizeKey = Enum.KeyCode.LeftControl
    })

    Tabs = {
        ESP = Window:AddTab({ Title = "ESP", Icon = "eye" }),
        Settings = Window:AddTab({ Title = "Settings", Icon = "settings" }),
        Config = Window:AddTab({ Title = "Config", Icon = "save" })
    }
end)

if not success then
    warn("Failed to create UI window: "..tostring(err))
    return
end

-- Add all your UI sections and elements here
-- ... [Keep all your existing UI code but wrap in pcalls where needed]

-- Initialize the ESP
local lastUpdate = 0
local heartbeatConn = RunService.RenderStepped:Connect(function()
    if not Settings.Enabled then return end
    
    local currentTime = tick()
    if currentTime - lastUpdate >= Settings.RefreshRate then
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                if not Drawings.ESP[player] then
                    CreateESP(player)
                end
                pcall(UpdateESP, player)
            end
        end
        lastUpdate = currentTime
    end
end)

-- Player connection handlers
Players.PlayerAdded:Connect(function(player)
    pcall(CreateESP, player)
end)

Players.PlayerRemoving:Connect(function(player)
    pcall(RemoveESP, player)
end)

-- Initial setup for existing players
for _, player in ipairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        pcall(CreateESP, player)
    end
end

-- Rainbow color effect
task.spawn(function()
    while task.wait(0.1) do
        Colors.Rainbow = Color3.fromHSV(tick() * Settings.RainbowSpeed % 1, 1, 1)
    end
end)

-- Final initialization
pcall(function()
    Window:SelectTab(1)
    Fluent:Notify({
        Title = "WA Universal ESP",
        Content = "Loaded successfully!",
        Duration = 5
    })
end)
